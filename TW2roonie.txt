SuccList = {
'S': [['A', 3], ['B', 6], ['C', 5]],
'A': [['E', 8], ['D', 9]],
'B': [['G', 14], ['F', 12]],
'C': [['H', 7]],
'H': [['J', 6], ['I', 5]],
'I': [['M', 2], ['L', 10], ['K', 1]]
}
Start = input("Enter Source node >> ").upper()
Goal = input("Enter Goal node >> ").upper()

SUCCESS = True
FAILURE = False

def GOALTEST(N):
    return N == Goal

def MOVGEN(N):
    return SuccList.get(N, [])

def BestFirstSearch():
    OPEN = [[Start, 5]]
    CLOSED = []
    i = 1
    while OPEN and not any(GOALTEST(node[0]) for node in OPEN):
        print("\n<<<<<<<<<<----({})---->>>>>>>>>>\n".format(i))
        N = OPEN.pop(0)
        CLOSED.append(N)
        print("CLOSED: ", CLOSED)
        CHILD = [val for val in MOVGEN(N[0]) if val not in OPEN and val not in CLOSED]
        OPEN.extend(CHILD)
        OPEN.sort(key=lambda x: x[1])
        print("Sorted OPEN=", OPEN)
        i += 1
    return OPEN or CLOSED

result = BestFirstSearch()
print("Best First Search Path >>>>> {} <<<<{}>>>>".format(result, "SUCCESS" if result else
"FAILURE"))
